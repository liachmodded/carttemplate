plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.6.1'
    //id "checkstyle"
}

def env = System.getenv()
version = project.modVersion + '.' + env.BUILD_NUMBER ?: 'local'
group = project.mavenGroup

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraftVersion}"
    mappings "net.fabricmc:yarn:${project.yarnMappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loaderVersion}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.apiVersion}"
}

sourceSets {
    code {
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += configurations.minecraftNamed
        runtimeClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += configurations.minecraftNamed
    }
    data {
        compileClasspath += sourceSets.code.compileClasspath
        compileClasspath += sourceSets.code.output
        runtimeClasspath += sourceSets.code.compileClasspath
        runtimeClasspath += sourceSets.code.output
    }
}

//checkstyle {
//    configFile = rootProject.file("checkstyle.xml")
//    toolVersion = '8.31'
//}

license {
    header = file('HEADER.txt')
    include '**/*.java'
    style.java = 'BLOCK_COMMENT'
    newLine = false
}

tasks.withType(JavaCompile) {
    options.release = 16
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc) {
    options {
        source = "16"
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        memberLevel = JavadocMemberLevel.PACKAGE
        quiet()
        // https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#additional-options-provided-by-the-standard-doclet
        addBooleanOption 'Xdoclint:none', true
    }
}

tasks.withType(Jar) {
    from "LICENSE"
}

def dataDir = file("$buildDir/datadump/")
def dataCacheDir = file("$dataDir/.cache/")
def outputDirectory = file("$buildDir/pom-properties")
def pomProperties = file("$outputDirectory/pom.properties")

task generateData(type: JavaExec) {
    enabled = false
    doFirst {
        dataDir.mkdirs()
    }

    classpath = sourceSets.data.runtimeClasspath

    mainClass = project.dataEntry

    // arguments to pass to the application

    workingDir dataDir
    inputs.files sourceSets.data.output
    outputs.dir dataDir
    args dataDir.getAbsolutePath()

    doLast {
        dataCacheDir.delete()
    }
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set "sources"
    from sourceSets.code.allSource
    from "LICENSE"
}

javadoc {
    source = sourceSets.code.allJava
    classpath = sourceSets.code.compileClasspath

    options {
        if (file("readme.html").exists()) {
            overview = "readme.html"
        }
        links(
                "https://maven.fabricmc.net/docs/fabric-api-${project.apiVersion}/",
                "https://maven.fabricmc.net/docs/fabric-loader-${project.loaderVersion}/",
                //"https://maven.fabricmc.net/docs/yarn-${project.yarnMappings}/", // mapping jd broke for now
                'https://guava.dev/releases/21.0/api/docs/',
                'https://asm.ow2.io/javadoc/',
                'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/',
                'https://docs.oracle.com/en/java/javase/16/docs/api/'
                // Need to add minecraft jd publication once there is one available
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set "javadoc"
    from javadoc.destinationDir
}

jar {
    dependsOn generateData
    from sourceSets.code.output
}

//processResources {
    //from(generateData.outputs.files) {
    //    include "/data/"
    //}
    //from sourceSets.code.resources.srcDirs

    //inputs.properties "version": project.version, "description": project.description

    //filesMatching(['fabric.mod.json', 'pack.mcmeta']]) {
    //    expand(
    //            "version": project.version,
    //            "description": project.description,
    //            "repoOwner": project.repoOwner,
    //            "repoName": project.repoName,
    //            "id": project.modId,
    //            "minecraftVersionLimit": project.minecraftVersionLimit,
    //            "loaderVersionLimit": project.loaderVersionLimit
    //    )
    //}
//}

artifacts {
    archives remapJar
    archives(sourcesJar) {
    classifier = "sources"
        builtBy remapSourcesJar
    }
    archives javadocJar
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = project.name
                description = project.description
                url = "https://github.com/${project.repoOwner}/${project.repoName}"
                licenses {
                    license {
                        name = project.codeLicense
                    }
                }

                scm {
                    url = "https://github.com/${project.repoOwner}/${project.repoName}"
                }
            }

            // add all the jars that should be included when publishing to maven
            afterEvaluate {
                artifact remapJar
                artifact(sourcesJar) {
                    classifier = "sources"
                    builtBy remapSourcesJar
                }
                artifact javadocJar
            }
        }
    }

    if (env.GITHUB_TOKEN) {
        // select the repositories you want to publish to
        repositories {
            maven {
                name = "GitHub"
                url = uri("https://maven.pkg.github.com/${project.repoOwner}/${project.repoName}")
                credentials {
                    username = env.GITHUB_ACTOR
                    password = env.GITHUB_TOKEN
                }
            }
        }
    }
}
