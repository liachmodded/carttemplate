plugins {
    id 'fabric-loom' version '0.2.3-SNAPSHOT'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'net.minecrell.licenser' version '0.4.1'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
if (isNullOrEmpty(System.getenv("TRAVIS_TAG")) && !isNullOrEmpty(System.getenv('TRAVIS_COMMIT'))) {
    version = project.mod_version + '.' + System.getenv('TRAVIS_COMMIT')
} else {
    version = project.mod_version
}
logger.lifecycle("doublecart version ${project.version}")
group = project.maven_group

minecraft {
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}"
    modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    // modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

license {
    header = file('HEADER.txt')
    include '**/*.java'
    style.java = 'BLOCK_COMMENT'
    newLine = false
}

processResources {
    inputs.properties "version": project.version, "description": project.description

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version, "description": project.description
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier = "javadocs"
    from javadocs.destinationDir
}

jar {
    from "LICENSE"
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocsJar
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : System.getenv('bintray_user')
    key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : System.getenv('bintray_key')
    publish = true
    override = true
    publications = ['mavenJava']
    pkg {
        repo = 'doublecart'
        name = 'doublecart'
        user = 'liach'
        userOrg = 'liachmodded'
        licenses = ['MPL-2.0']
        desc = project.description
        websiteUrl = 'https://github.com/liachmodded/doublecart'
        issueTrackerUrl = 'https://github.com/liachmodded/doublecart/issues'
        vcsUrl = 'https://github.com/liachmodded/doublecart.git'
        publicDownloadNumbers = true

        githubRepo = 'liachmodded/doublecart'
        version {
            name = project.version
            released = new Date()
            if (!isNullOrEmpty(System.getenv("TRAVIS_TAG"))) {
                vcsTag = System.getenv("TRAVIS_TAG")
            } else {
                vcsTag = ''
            }
        }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact javadocsJar
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

static boolean isNullOrEmpty(String st) {
    return st == null || st.isEmpty()
}
